const express = require('express');
const session = require('express-session');
const app = express();
const path = require('path');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const mysql = require('mysql2');

// Configurar conexión a MySQL
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'BaRcA1025', // cambia por tu contraseña
  database: 'equipos_imagen'
});

connection.connect(err => {
  if (err) {
    console.error('Error conectando a MySQL:', err);
    return;
  }
  console.log('Conexión exitosa a MySQL');
});

// Configuración de la sesión
app.use(session({
  secret: 'secretKey',
  resave: false,
  saveUninitialized: false,
}));

app.use(bodyParser.urlencoded({ extended: true }));

function requireLogin(req, res, next) {
  if (!req.session.user) {
    return res.redirect('/login.html');
  }
  next();
}

function requireRole(role) {
  return (req, res, next) => {
      if (req.session.user && role.includes(req.session.user.tipo_usuario)) {
          next();
      } else {
          res.status(403).send('Acceso denegado');
      }
  };
}

// Ruta para la página principal
app.get('/', requireLogin, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
  
  // Servir archivos estáticos (HTML)
  app.use(express.static(path.join(__dirname, 'public')));
  
  // Registro de usuario
  app.post('/registrar', (req, res) => {
    const { nombre, correo, password, codigo_acceso } = req.body;
  
    const query = 'SELECT tipo_usuario FROM codigos_acceso WHERE codigo = ?';
    connection.query(query, [codigo_acceso], (err, results) => {
        if (err || results.length === 0) {
            return res.send('Código de acceso inválido');
        }
  
        const tipo_usuario = results[0].tipo_usuario;
        const hashedPassword = bcrypt.hashSync(password, 10);
  
        const insertUser = 'INSERT INTO usuarios (nombre, correo, contraseña_hash, tipo_usuario) VALUES (?, ?, ?, ?)';
        connection.query(insertUser, [nombre, correo, hashedPassword, tipo_usuario], (err) => {
          console.log(err);
            if (err) return res.send('Error al registrar usuario');
            res.redirect('/login.html');
        });
    });
  });

  // Iniciar sesión
app.post('/login', (req, res) => {
    console.log(req.body);
    const { nombre, password } = req.body;
  
    // Consulta para obtener el usuario y su tipo
    const query = 'SELECT * FROM usuarios WHERE nombre = ?';
    connection.query(query, [nombre], (err, results) => {
        if (err) {
            return res.send('Error al obtener el usuario');
        }
  
        if (results.length === 0) {
            return res.send('Usuario no encontrado');
        }
  
        const user = results[0];
  
        // Verificar la contraseña
        const isPasswordValid = bcrypt.compareSync(password, user.contraseña_hash);
        if (!isPasswordValid) {
            return res.send('Contraseña incorrecta');
        }
  
        // Almacenar la información del usuario en la sesión
        req.session.user = {
            id: user.id,
            username: user.username,
            tipo_usuario: user.tipo_usuario // Aquí se establece el tipo de usuario en la sesión
        };
  
        // Redirigir al usuario a la página principal
        res.redirect('/');
    });
  });
  
  // Cerrar sesión
  app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login.html');
  });

// Ruta para guardar datos en la base de datos
app.post('/insertar-equipo', requireLogin, requireRole(['admin']), (req, res) => {
    const { nombre, tipo, descripcion, estado, usuario_id } = req.body;
  
    const query = 'INSERT INTO equipos (nombre_equipo, tipo_equipo, descripcion, estado, usuario_id) VALUES (?, ?, ?, ?, ?)';
    connection.query(query, [nombre, tipo, descripcion, estado, usuario_id], (err, result) => {
      if (err) {
        return res.send('Error al guardar los datos en la base de datos.');
      }
      res.send(Equipo ${nombre} guardado en la base de datos.);
    });
  });

  app.post('/editar-equipo', requireLogin, requireRole(['admin','tecnico']), (req, res) => {
    const { nombre, tipo, descripcion, estado, usuario_id, id } = req.body;
  
    const query = 'UPDATE equipos SET nombre_equipo = ?, tipo_equipo = ?, descripcion = ?, estado = ?, usuario_id = ? WHERE id = ?;'
    connection.query(query, [nombre, tipo, descripcion, estado, usuario_id, id], (err, result) => {
      if (err) {
        return res.send('Error al actualizar los datos en la base de datos.');
      }
      res.send(Equipo ${nombre} actualizado en la base de datos.);
    });
  });

  app.post('/eliminar-equipo', requireLogin, requireRole(['admin']), (req, res) => {
    const { id } = req.body;
  
    const query = 'DELETE FROM equipos WHERE id = ?;'
    connection.query(query, [id], (err, result) => {
      if (err) {
        return res.send('Error al actualizar los datos en la base de datos.');
      }
      res.send(Equipo eliminado de la base de datos.);
    });
  });

  // Ruta para que solo admin pueda ver todos los usuarios
app.get('/ver-usuarios', requireLogin, requireRole(['admin']), (req, res) => {
    const query = 'SELECT * FROM usuarios';
  
    connection.query(query, (err, results) => {
        if (err) {
          return res.send('Error al obtener usuarios');
          }
  
          let html = `
          <html>
          <head>
            <link rel="stylesheet" href="/styles.css">
            <title>Usuarios</title>
          </head>
          <body>
            <h1>Usuarios Registrados</h1>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Nombre de Usuario</th>
                  <th>Correo</th>
                  <th>Tipo de Usuario</th>
                </tr>
              </thead>
              <tbody>
        `;
    
        results.forEach(usuario => {
          html += `
            <tr>
              <td>${usuario.id}</td>
              <td>${usuario.nombre}</td>
              <td>${usuario.correo}</td>
              <td>${usuario.tipo_usuario}</td>
          `;
        });
    
        html += `
              </tbody>
            </table>
            <button onclick="window.location.href='/'">Volver</button>
          </body>
          </html>
        `;
    
        res.send(html);
    });
  });

// Ruta para mostrar los datos de la base de datos en formato HTML (médicos)
app.get('/ver-equipos', requireLogin, requireRole(['admin','auditor']), (req, res) => {
    connection.query('SELECT * FROM equipos', (err, results) => {
      if (err) {
        return res.send('Error al obtener los datos.');
      }
  
      let html = `
        <html>
        <head>
          <link rel="stylesheet" href="/styles.css">
          <title>Médicos</title>
        </head>
        <body>
          <h1>Equipos Registrados</h1>
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Nombre del Equipo</th>
                <th>Tipo de Equipo</th>
                <th>Descripción</th>
                <th>Estado del Equipo</th>
                <th>ID del Usuario</th>
              </tr>
            </thead>
            <tbody>
      `;
  
      results.forEach(equipo => {
        html += `
          <tr>
            <td>${equipo.id}</td>
            <td>${equipo.nombre_equipo}</td>
            <td>${equipo.tipo_equipo}</td>
            <td>${equipo.descripcion}</td>
            <td>${equipo.estado}</td>
            <td>${equipo.usuario_id}</td>
          </tr>
        `;
      });
  
      html += `
            </tbody>
          </table>
          <button onclick="window.location.href='/'">Volver</button>
        </body>
        </html>
      `;
  
      res.send(html);
    });
  });

  // Ruta para obtener el tipo de usuario actual
app.get('/tipo-usuario', requireLogin, (req, res) => {
  res.json({ tipo_usuario: req.session.user.tipo_usuario });
});
  
// Iniciar el servidor
app.listen(3000, () => {
    console.log('Servidor corriendo en http://localhost:3000');
  });

